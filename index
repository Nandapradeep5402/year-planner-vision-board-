<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Year Planner Vision Board</title>
  <style>
    :root{--bg:#0f1724;--card:#0b1220;--accent:#f59e0b;--muted:#94a3b8;--glass:rgba(255,255,255,0.03)}
    *{box-sizing:border-box}
    body{font-family:Inter,system-ui,Segoe UI,Roboto,'Helvetica Neue',Arial;margin:0;background:linear-gradient(180deg,#071027 0%, #041224 100%);color:#e6eef8;min-height:100vh}
    .app{max-width:980px;margin:28px auto;padding:20px}
    header{display:flex;align-items:center;justify-content:space-between;margin-bottom:18px}
    h1{font-size:20px;margin:0}
    nav{display:flex;gap:8px}
    button.btn{background:var(--glass);border:1px solid rgba(255,255,255,0.06);padding:8px 12px;border-radius:10px;color:inherit;cursor:pointer}
    .card{background:linear-gradient(180deg, rgba(255,255,255,0.02), rgba(255,255,255,0.01));padding:18px;border-radius:14px;box-shadow:0 6px 20px rgba(2,6,23,0.6);}
    .hidden{display:none}
    .center{display:flex;align-items:center;justify-content:center}
    .quote{font-size:18px;font-weight:600;margin:12px 0}
    .small{font-size:13px;color:var(--muted)}
    /* layout for pages */
    .pages section{margin-top:12px}
    .controls{display:flex;gap:8px;flex-wrap:wrap}
    /* calendar styles */
    .calendar{display:grid;grid-template-columns:repeat(3,1fr);gap:12px;margin-top:12px}
    .month{background:var(--card);padding:10px;border-radius:8px}
    .month h3{margin:0 0 8px 0;font-size:14px}
    .grid{display:grid;grid-template-columns:repeat(7,1fr);gap:4px}
    .cell{font-size:12px;padding:6px;border-radius:6px;text-align:center}
    .cell.header{font-weight:700;color:var(--muted)}
    .cell.today{background:linear-gradient(90deg,var(--accent),#ffb86b);color:#081426}

    /* bucket list and tracker */
    .list{margin-top:12px}
    .list input[type=text], textarea, input[type=number]{width:100%;padding:10px;border-radius:8px;border:1px solid rgba(255,255,255,0.06);background:transparent;color:inherit}
    .flex-row{display:flex;gap:8px}
    .flex-row > *{flex:1}
    ul.items{list-style:none;padding:0;margin:10px 0}
    ul.items li{padding:8px;border-radius:8px;background:var(--glass);display:flex;align-items:center;justify-content:space-between;margin-bottom:8px}
    .muted{color:var(--muted)}
    footer{margin-top:18px;text-align:center;color:var(--muted);font-size:13px}
    .export{margin-left:8px}
    @media (max-width:700px){.calendar{grid-template-columns:repeat(1,1fr)}}
  </style>
</head>
<body>
  <div class="app card">
    <header>
      <h1>Year Planner — Vision Board</h1>
      <nav>
        <button class="btn" data-page="home">Home</button>
        <button class="btn" data-page="calendar">Calendar</button>
        <button class="btn" data-page="bucket">Bucket List</button>
        <button class="btn" data-page="money">Expenses & Savings</button>
        <button class="btn" data-page="review">Year Review</button>
        <button class="btn" id="exportBtn">Export</button>
      </nav>
    </header>

    <div class="pages">
      <!-- Home / Front page with inspirational quotes -->
      <section id="home" class="page card">
        <div style="display:flex;gap:12px;align-items:center;flex-wrap:wrap">
          <div style="flex:1">
            <h2>Front — Inspiration</h2>
            <p class="small">A rotating selection of inspirational quotes to keep you motivated this year.</p>
            <div id="quoteBox" class="card" style="margin-top:12px">
              <div class="quote" id="quoteTxt"></div>
              <div class="small" id="quoteAuthor"></div>
              <div style="margin-top:10px" class="controls">
                <button class="btn" id="prevQuote">Previous</button>
                <button class="btn" id="nextQuote">Next</button>
                <button class="btn" id="randomQuote">Surprise me</button>
              </div>
            </div>
          </div>
          <div style="width:260px">
            <div class="card small center" style="height:160px;flex-direction:column;justify-content:center">
              <div style="font-size:13px">Year</div>
              <div style="font-size:28px;font-weight:700" id="yearDisplay"></div>
              <div class="muted" style="font-size:11px;margin-top:6px">Use the calendar page for a full calendar</div>
            </div>
          </div>
        </div>
      </section>

      <!-- Calendar -->
      <section id="calendar" class="page hidden card">
        <h2>Calendar — <span id="calYearLabel"></span></h2>
        <p class="small">Click a day to quickly add a note (stored in local storage).</p>
        <div class="calendar" id="calendarGrid"></div>
        <div id="dayNote" class="card hidden" style="margin-top:12px">
          <h3 id="dayNoteLabel"></h3>
          <textarea id="dayNoteText" rows="3" placeholder="Add a quick note for this date"></textarea>
          <div style="margin-top:8px" class="controls">
            <button class="btn" id="saveNote">Save Note</button>
            <button class="btn" id="clearNote">Clear</button>
            <button class="btn" id="closeNote">Close</button>
          </div>
        </div>
      </section>

      <!-- Bucket list -->
      <section id="bucket" class="page hidden card">
        <h2>Bucket List</h2>
        <p class="small">Add your top goals for the year. Mark them done when completed.</p>
        <div class="list">
          <div class="flex-row">
            <input id="bucketInput" type="text" placeholder="Add a new bucket item (e.g. Learn Spanish)" />
            <button class="btn" id="addBucket">Add</button>
          </div>
          <ul class="items" id="bucketItems"></ul>
        </div>
      </section>

      <!-- Expenses & Savings -->
      <section id="money" class="page hidden card">
        <h2>Expenses & Savings</h2>
        <p class="small">Quick tracker to record expenses and savings. Totals are computed and stored.</p>
        <div style="display:flex;gap:12px;flex-wrap:wrap;margin-top:12px">
          <div style="flex:1;min-width:260px" class="card">
            <h3>Add Transaction</h3>
            <input id="txDesc" type="text" placeholder="Description" />
            <div style="height:8px"></div>
            <div class="flex-row">
              <select id="txType"><option value="expense">Expense</option><option value="saving">Saving</option></select>
              <input id="txAmt" type="number" placeholder="Amount" />
            </div>
            <div style="height:8px"></div>
            <div class="controls">
              <button class="btn" id="addTx">Add</button>
              <button class="btn" id="clearTx">Clear All</button>
            </div>
          </div>

          <div style="flex:1;min-width:260px" class="card">
            <h3>Summary</h3>
            <div class="small">Total Expenses: <span id="totalExpense">0</span></div>
            <div class="small">Total Savings: <span id="totalSaving">0</span></div>
            <div class="small">Net (Savings - Expenses): <span id="netVal">0</span></div>
            <div style="height:8px"></div>
            <ul class="items" id="txList"></ul>
          </div>
        </div>
      </section>

      <!-- Year review -->
      <section id="review" class="page hidden card">
        <h2>Year Review</h2>
        <p class="small">At year-end (or anytime) mark if you achieved your goals, reflect, and store notes.</p>
        <div style="margin-top:12px">
          <label class="small">How would you rate your year?</label>
          <div style="height:8px"></div>
          <select id="rating">
            <option value="">-- Select --</option>
            <option>Excellent</option>
            <option>Good</option>
            <option>Average</option>
            <option>Poor</option>
          </select>
          <div style="height:8px"></div>
          <label class="small">Notes / Review</label>
          <textarea id="reviewNotes" rows="6" placeholder="What went well? What didn't? What will you change next year?"></textarea>
          <div style="height:8px"></div>
          <div class="controls">
            <button class="btn" id="saveReview">Save Review</button>
            <button class="btn" id="clearReview">Clear</button>
          </div>
          <div id="reviewSaved" class="muted small" style="margin-top:8px"></div>
        </div>
      </section>

    </div>

    <footer class="small">This planner stores data locally in your browser. Use the Export button to download JSON.</footer>
  </div>

  <script>
    // --- Globals ---
    const year = new Date().getFullYear();
    document.getElementById('yearDisplay').textContent = year;
    document.getElementById('calYearLabel').textContent = year;

    // --- Navigation ---
    document.querySelectorAll('button[data-page]').forEach(btn=>{
      btn.addEventListener('click', ()=>{
        showPage(btn.dataset.page);
      });
    });
    function showPage(id){
      document.querySelectorAll('.page').forEach(p=>p.classList.add('hidden'));
      document.getElementById(id).classList.remove('hidden');
      if(id==='calendar') renderCalendar(year);
      if(id==='bucket') renderBucket();
      if(id==='money') renderTx();
      if(id==='review') loadReview();
    }
    showPage('home');

    // --- Quotes ---
    const quotes = [
      {q:"What you get by achieving your goals is not as important as what you become by achieving your goals.", a:"Zig Ziglar"},
      {q:"The secret of getting ahead is getting started.", a:"Mark Twain"},
      {q:"Don't watch the clock; do what it does. Keep going.", a:"Sam Levenson"},
      {q:"Small daily improvements over time lead to stunning results.", a:"Robin Sharma"},
      {q:"Dream big. Start small. Act now.", a:"Unknown"}
    ];
    let qi = 0;
    const quoteTxt = document.getElementById('quoteTxt');
    const quoteAuthor = document.getElementById('quoteAuthor');
    function showQuote(i){qi=(i+quotes.length)%quotes.length; quoteTxt.textContent = '"'+quotes[qi].q+'"'; quoteAuthor.textContent = '- '+quotes[qi].a}
    showQuote(0);
    document.getElementById('prevQuote').onclick = ()=>showQuote(qi-1);
    document.getElementById('nextQuote').onclick = ()=>showQuote(qi+1);
    document.getElementById('randomQuote').onclick = ()=>showQuote(Math.floor(Math.random()*quotes.length));

    // --- Calendar generation ---
    function renderCalendar(y){
      const months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];
      const grid = document.getElementById('calendarGrid');
      grid.innerHTML='';
      for(let m=0;m<12;m++){
        const container = document.createElement('div'); container.className='month card';
        const title = document.createElement('h3'); title.textContent = months[m]+' '+y; container.appendChild(title);
        const g = document.createElement('div'); g.className='grid';
        ['S','M','T','W','T','F','S'].forEach(h=>{const c=document.createElement('div');c.className='cell header';c.textContent=h;g.appendChild(c)});
        const first = new Date(y,m,1).getDay();
        const days = new Date(y,m+1,0).getDate();
        for(let i=0;i<first;i++){const c=document.createElement('div');c.className='cell';c.textContent='';g.appendChild(c)}
        for(let d=1;d<=days;d++){
          const c=document.createElement('div');c.className='cell';c.textContent=d;
          const dateKey = keyForDate(y,m+1,d);
          const note = localStorage.getItem('planner:note:'+dateKey);
          if(note) c.title = note;
          const today = new Date(); if(today.getFullYear()===y && today.getMonth()===m && today.getDate()===d) c.classList.add('today');
          c.addEventListener('click',()=>openNote(y,m+1,d));
          g.appendChild(c);
        }
        container.appendChild(g);
        grid.appendChild(container);
      }
    }
    function keyForDate(y,mo,d){return y+'-'+String(mo).padStart(2,'0')+'-'+String(d).padStart(2,'0')}

    // --- Day notes ---
    function openNote(y,mo,d){
      const label = document.getElementById('dayNoteLabel');
      const ta = document.getElementById('dayNoteText');
      const wrap = document.getElementById('dayNote');
      const key = keyForDate(y,mo,d);
      label.textContent = 'Note for '+key;
      ta.value = localStorage.getItem('planner:note:'+key) || '';
      wrap.classList.remove('hidden');
      document.getElementById('saveNote').onclick = ()=>{localStorage.setItem('planner:note:'+key, ta.value); renderCalendar(year); alert('Saved note for '+key)};
      document.getElementById('clearNote').onclick = ()=>{localStorage.removeItem('planner:note:'+key); ta.value=''; renderCalendar(year); alert('Cleared note for '+key)};
      document.getElementById('closeNote').onclick = ()=>{wrap.classList.add('hidden')};
    }

    // --- Bucket list ---
    function getBuckets(){return JSON.parse(localStorage.getItem('planner:buckets:'+year) || '[]')}
    function saveBuckets(arr){localStorage.setItem('planner:buckets:'+year, JSON.stringify(arr))}
    function renderBucket(){const list=getBuckets(); const ul=document.getElementById('bucketItems'); ul.innerHTML=''; list.forEach((it,idx)=>{const li=document.createElement('li'); li.innerHTML = '<span>'+escapeHtml(it.text)+'</span><div style="display:flex;gap:8px"><button class="btn" onclick="toggleDone('+idx+')">'+(it.done? 'Undo':'Done')+'</button><button class="btn" onclick="removeBucket('+idx+')">Remove</button></div>'; ul.appendChild(li)});
    }
    function addBucket(){const v=document.getElementById('bucketInput').value.trim(); if(!v) return alert('Enter an item'); const arr=getBuckets(); arr.push({text:v,done:false}); saveBuckets(arr); document.getElementById('bucketInput').value=''; renderBucket();}
    function toggleDone(i){const arr=getBuckets(); arr[i].done = !arr[i].done; saveBuckets(arr); renderBucket();}
    function removeBucket(i){const arr=getBuckets(); arr.splice(i,1); saveBuckets(arr); renderBucket();}
    document.getElementById('addBucket').addEventListener('click', addBucket);
    window.toggleDone = toggleDone; window.removeBucket = removeBucket;

    // --- Expenses & savings ---
    function getTx(){return JSON.parse(localStorage.getItem('planner:tx:'+year) || '[]')}
    function saveTx(a){localStorage.setItem('planner:tx:'+year, JSON.stringify(a))}
    function addTx(){const desc=document.getElementById('txDesc').value.trim(); const type=document.getElementById('txType').value; const amt=Number(document.getElementById('txAmt').value); if(!desc || !amt) return alert('Provide description and amount'); const arr=getTx(); arr.push({desc,type,amt,date:new Date().toISOString()}); saveTx(arr); document.getElementById('txDesc').value=''; document.getElementById('txAmt').value=''; renderTx();}
    function renderTx(){const arr=getTx(); const txList=document.getElementById('txList'); txList.innerHTML=''; let exp=0,sav=0; arr.forEach((t,idx)=>{const li=document.createElement('li'); li.innerHTML = '<div><strong>'+escapeHtml(t.desc)+'</strong><div class="muted" style="font-size:11px">'+new Date(t.date).toLocaleString()+'</div></div><div style="text-align:right"><div>'+t.type+': '+t.amt+'</div><div style="display:flex;gap:8px;margin-top:6px"><button class="btn" onclick="removeTx('+idx+')">Remove</button></div></div>'; txList.appendChild(li); if(t.type==='expense') exp+=Number(t.amt); else sav+=Number(t.amt);});
      document.getElementById('totalExpense').textContent = exp;
      document.getElementById('totalSaving').textContent = sav;
      document.getElementById('netVal').textContent = (sav - exp);
    }
    function removeTx(i){const a=getTx(); a.splice(i,1); saveTx(a); renderTx();}
    function clearTx(){if(!confirm('Clear all transactions?')) return; localStorage.removeItem('planner:tx:'+year); renderTx();}
    document.getElementById('addTx').addEventListener('click', addTx);
    document.getElementById('clearTx').addEventListener('click', ()=>{clearTx()});
    window.removeTx = removeTx;

    // --- Review ---
    function loadReview(){const r = JSON.parse(localStorage.getItem('planner:review:'+year) || '{}'); if(r.rating) document.getElementById('rating').value = r.rating; else document.getElementById('rating').value=''; document.getElementById('reviewNotes').value = r.notes || ''; document.getElementById('reviewSaved').textContent = r.savedAt ? 'Saved on '+new Date(r.savedAt).toLocaleString() : ''}
    function saveReview(){const r={rating:document.getElementById('rating').value, notes:document.getElementById('reviewNotes').value, savedAt:new Date().toISOString()}; localStorage.setItem('planner:review:'+year, JSON.stringify(r)); document.getElementById('reviewSaved').textContent = 'Saved on '+new Date().toLocaleString();}
    function clearReview(){if(!confirm('Clear saved review?')) return; localStorage.removeItem('planner:review:'+year); loadReview();}
    document.getElementById('saveReview').addEventListener('click', saveReview);
    document.getElementById('clearReview').addEventListener('click', clearReview);

    // --- Export ---
    document.getElementById('exportBtn').addEventListener('click', ()=>{
      const data = {
        year: year,
        buckets: getBuckets(),
        transactions: getTx(),
        notes: collectAllNotes(),
        review: JSON.parse(localStorage.getItem('planner:review:'+year) || '{}')
      };
      const blob = new Blob([JSON.stringify(data,null,2)], {type:'application/json'});
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a'); a.href=url; a.download='vision-board-'+year+'.json'; document.body.appendChild(a); a.click(); a.remove(); URL.revokeObjectURL(url);
    });

    function collectAllNotes(){const out = {}; for(let i=0;i<localStorage.length;i++){const k = localStorage.key(i); if(k && k.startsWith('planner:note:')){out[k.replace('planner:note:','')]=localStorage.getItem(k)}} return out}

    // Helpers
    function escapeHtml(s){return s.replaceAll('&','&amp;').replaceAll('<','&lt;').replaceAll('>','&gt;')}

    // Init small bits
    renderCalendar(year);
    renderBucket();
    renderTx();
    loadReview();

    // Clear all demo data (uncomment to reset on load) -- be careful
    // localStorage.clear();
  </script>
</body>
</html>
